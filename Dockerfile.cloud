# Cloud-optimized Dockerfile for Gnosis OCR Service with V2 Storage Architecture
# Designed for Google Cloud Run deployment with external model cache

FROM nvidia/cuda:12.2.2-cudnn8-runtime-ubuntu22.04

# Install Python and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgdal-dev \
    poppler-utils \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default and install pip properly
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    wget https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN python -m pip install --no-cache-dir -r requirements.txt

# Install Google Cloud Storage client for V2 architecture
RUN python -m pip install --no-cache-dir google-cloud-storage

# Create non-root user
RUN useradd -m -s /bin/bash appuser

# Copy application code (V2 architecture)
COPY --chown=appuser:appuser app/ ./app/
COPY --chown=appuser:appuser static/ ./static/

# Ensure proper permissions
RUN chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Create directories for storage and cache
RUN mkdir -p /tmp/storage /cache && \
    chown -R appuser:appuser /tmp/storage /cache

# Keep as root user for cloud storage access
# USER appuser

# Environment variables for cloud deployment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=7799 \
    HOST=0.0.0.0 \
    CUDA_VISIBLE_DEVICES=0 \
    TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6" \
    MODEL_NAME="nanonets/Nanonets-OCR-s" \
    STORAGE_PATH="/tmp/storage" \
    RUNNING_IN_CLOUD="true" \
    MODEL_CACHE_PATH="/cache/huggingface" \
    GCS_BUCKET_NAME="gnosis-ocr-storage" \
    MODEL_BUCKET_NAME="gnosis-ocr-models" \
    HF_DATASETS_OFFLINE=1 \
    TRANSFORMERS_OFFLINE=1

# Expose port
EXPOSE 7799

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Run the V2 application
CMD ["python", "-m", "uvicorn", "app.main_v2:app", "--host", "0.0.0.0", "--port", "7799"]
