version: '3.8'

services:
  # Original OCR application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "7799:7799"
    environment:
      - PORT=7799
      - CUDA_VISIBLE_DEVICES=0
      - MAX_FILE_SIZE=52428800
      - SESSION_TIMEOUT=3600
      - LOG_LEVEL=INFO
      - MODEL_NAME=nanonets/Nanonets-OCR-s
      - STORAGE_PATH=/tmp/ocr_sessions
      # Add Mystic client configuration
      - MYSTIC_ENABLED=true
      - MYSTIC_HOST=mystic
      - MYSTIC_PORT=8899
    volumes:
      - ./app:/app/app
      - ./static:/app/static
      - ./data:/tmp/ocr_sessions
      # Share Python site-packages for Mystic injection
      - shared_python:/usr/local/lib/python3.11/site-packages
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7799/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - mystic
    networks:
      - gnosis-network

  # Gnosis Mystic sidecar container
  mystic:
    build:
      context: .
      dockerfile: Dockerfile.mystic
    ports:
      - "8899:8899"  # Mystic API server
      - "8900:8900"  # Mystic web dashboard (future)
    environment:
      - MYSTIC_PORT=8899
      - MYSTIC_HOST=0.0.0.0
      - PROJECT_ROOT=/app
      - LOG_LEVEL=INFO
      - MYSTIC_MODE=server
      # Connection to app container
      - TARGET_SERVICE=app
      - TARGET_PORT=7799
    volumes:
      - ./app:/app:ro  # Read-only access to application code
      - ./.mystic:/app/.mystic  # Mystic configuration
      - mystic_data:/var/lib/mystic  # Persistent data
      - shared_python:/usr/local/lib/python3.11/site-packages  # Share Python packages
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8899/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - gnosis-network

  # MCP Server for Claude Desktop integration
  mystic-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mystic
    command: ["python", "/mystic/mystic_mcp_standalone.py", "--project-root", "/app", "--host", "mystic", "--port", "8899"]
    environment:
      - MYSTIC_HOST=mystic
      - MYSTIC_PORT=8899
      - PROJECT_ROOT=/app
    volumes:
      - ./app:/app:ro
      - ./.mystic:/app/.mystic:ro
    depends_on:
      - mystic
    networks:
      - gnosis-network
    # This service doesn't expose ports - it's used via stdio by Claude Desktop

  # Optional: Redis for session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - gnosis-network

  # Optional: PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=gnosis
      - POSTGRES_PASSWORD=gnosis123
      - POSTGRES_DB=gnosis_ocr
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gnosis-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
      - mystic
    networks:
      - gnosis-network

volumes:
  redis_data:
  postgres_data:
  mystic_data:
  shared_python:

networks:
  gnosis-network:
    driver: bridge
