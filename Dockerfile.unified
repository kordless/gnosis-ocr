# Unified Dockerfile - Works for both local and Google Cloud Run with GPU (NVIDIA L4)
FROM nvidia/cuda:12.2.2-runtime-ubuntu22.04

# Build arguments for environment-specific configuration
ARG BUILD_ENV=local
ARG PORT=8080
ARG USER_NAME=appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    PORT=${PORT} \
    HOST=0.0.0.0

# Install Python and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    curl \
    git \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    poppler-utils \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    wget https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# Disable IPv6 for HuggingFace compatibility (if needed for Cloud Run)
RUN if [ "$BUILD_ENV" = "cloudrun" ]; then \
        echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf && \
        echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.conf && \
        echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> /etc/sysctl.conf; \
    fi

# Create app directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .

# Install PyTorch with CUDA 12.1 support for GPU acceleration
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# Install other requirements
RUN pip install --no-cache-dir -r requirements.txt

# Create non-root user
RUN useradd -m -s /bin/bash ${USER_NAME}

# Create necessary directories with proper permissions
RUN mkdir -p /app/cache /app/storage && \
    chown -R ${USER_NAME}:${USER_NAME} /app/cache && \
    chmod -R 777 /app/storage && \
    chown -R ${USER_NAME}:${USER_NAME} /app/storage

# Copy application code with proper ownership
COPY --chown=${USER_NAME}:${USER_NAME} app/ ./app/

# Switch to non-root user for security
USER ${USER_NAME}

# Set model and cache environment variables
ENV HF_HOME="/app/cache" \
    MODEL_CACHE_PATH="/app/cache" \
    TRANSFORMERS_CACHE="/app/cache" \
    HF_DATASETS_CACHE="/app/cache" \
    MODEL_NAME="nanonets/Nanonets-OCR-s" \
    STORAGE_PATH="/app/storage"

# Expose port
EXPOSE ${PORT}

# Health check (can be disabled for Cloud Run if needed)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Run the application
CMD ["sh", "-c", "python -m uvicorn app.main:app --host 0.0.0.0 --port ${PORT}"]
