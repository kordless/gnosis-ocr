# Cleanup Script - Organize Legacy Deployment Scripts
# Moves older deployment scripts into organized folders

param(
    [switch]$DryRun = $false
)

function Write-Status { param($Message) Write-Host "‚úÖ $Message" -ForegroundColor Green }
function Write-Warning { param($Message) Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow }
function Write-Info { param($Message) Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Cyan }
function Write-Header { param($Message) Write-Host "`nüßπ $Message" -ForegroundColor Blue }

Write-Header "Gnosis OCR Scripts Cleanup"
Write-Host "=========================" -ForegroundColor Blue

if ($DryRun) {
    Write-Warning "DRY RUN MODE - No files will be moved"
}

# Define script categories and their target folders
$Categories = @{
    "legacy" = @(
        "deploy.ps1"           # Original deployment script with backticks
    )
    "cache-debug" = @(
        "debug-cache.ps1",
        "final-cache-fix.ps1", 
        "fix-cache.ps1",
        "recover-cache.ps1",
        "setup-cache.ps1"
    )
    "diagnostics" = @(
        "diagnose.ps1"
    )
    "archive" = @(
        # Any other scripts we want to archive
    )
}

# Current scripts directory
$ScriptsPath = "C:\Users\kord\Code\gnosis\gnosis-ocr\scripts"

Write-Info "Current scripts directory: $ScriptsPath"

# Create organization folders
foreach ($category in $Categories.Keys) {
    $categoryPath = Join-Path $ScriptsPath $category
    
    if (-not (Test-Path $categoryPath)) {
        if ($DryRun) {
            Write-Info "Would create folder: $category"
        } else {
            New-Item -ItemType Directory -Path $categoryPath -Force | Out-Null
            Write-Status "Created folder: $category"
        }
    } else {
        Write-Info "Folder already exists: $category"
    }
}

# Move scripts to their categories
$movedCount = 0
$skippedCount = 0

foreach ($category in $Categories.Keys) {
    $scripts = $Categories[$category]
    
    if ($scripts.Count -eq 0) {
        continue
    }
    
    Write-Header "Processing $category scripts"
    
    foreach ($script in $scripts) {
        $sourcePath = Join-Path $ScriptsPath $script
        $destPath = Join-Path $ScriptsPath "$category\$script"
        
        if (Test-Path $sourcePath) {
            if ($DryRun) {
                Write-Info "Would move: $script -> $category/"
            } else {
                try {
                    Move-Item -Path $sourcePath -Destination $destPath -Force
                    Write-Status "Moved: $script -> $category/"
                    $movedCount++
                } catch {
                    Write-Warning "Failed to move $script`: $_"
                    $skippedCount++
                }
            }
        } else {
            Write-Warning "Script not found: $script (skipping)"
            $skippedCount++
        }
    }
}

# Create a README in the scripts folder explaining the organization
$readmeContent = @"
# Scripts Directory Organization

This directory contains deployment and utility scripts for Gnosis OCR.

## Current Active Scripts

- **build-deploy-v2.ps1** - Complete V2 build, push & deploy (RECOMMENDED)
- **deploy-v2-clean.ps1** - Deploy-only script with clean syntax

## Organized Legacy Scripts

### legacy/
- Original deployment scripts with deprecated syntax (backticks)

### cache-debug/  
- Scripts for debugging and fixing model cache issues
- Historical troubleshooting tools

### diagnostics/
- System diagnostic and debugging scripts

## Usage

For new deployments, use:
```powershell
.\build-deploy-v2.ps1
```

For deploy-only (when image already built):
```powershell
.\deploy-v2-clean.ps1
```

## Notes

- V2 scripts use clean PowerShell array splatting (no backticks)
- All V2 scripts include GPU acceleration and GCS mounting
- Legacy scripts are kept for reference but not recommended for active use

Generated by: cleanup-scripts.ps1
Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
"@

$readmePath = Join-Path $ScriptsPath "README.md"

if ($DryRun) {
    Write-Info "Would create README.md with organization info"
} else {
    $readmeContent | Out-File -FilePath $readmePath -Encoding UTF8
    Write-Status "Created README.md with organization info"
}

# Summary
Write-Header "Cleanup Summary"

if ($DryRun) {
    Write-Info "DRY RUN COMPLETE - No changes made"
    Write-Info "Run without -DryRun to execute the cleanup"
} else {
    Write-Status "Moved $movedCount scripts"
    if ($skippedCount -gt 0) {
        Write-Warning "Skipped $skippedCount scripts"
    }
    Write-Status "Scripts directory organized successfully"
}

Write-Host "`nüìÅ Final Structure:" -ForegroundColor Blue
Write-Host "scripts/" -ForegroundColor Cyan
Write-Host "‚îú‚îÄ‚îÄ build-deploy-v2.ps1 (NEW - Complete pipeline)" -ForegroundColor Green
Write-Host "‚îú‚îÄ‚îÄ deploy-v2-clean.ps1 (Current deploy-only)" -ForegroundColor Green  
Write-Host "‚îú‚îÄ‚îÄ cleanup-scripts.ps1 (This script)" -ForegroundColor Gray
Write-Host "‚îú‚îÄ‚îÄ README.md (Organization guide)" -ForegroundColor Gray
Write-Host "‚îú‚îÄ‚îÄ legacy/ (Deprecated scripts)" -ForegroundColor Yellow
Write-Host "‚îú‚îÄ‚îÄ cache-debug/ (Cache troubleshooting)" -ForegroundColor Yellow
Write-Host "‚îî‚îÄ‚îÄ diagnostics/ (System diagnostics)" -ForegroundColor Yellow

Write-Host "`nüéØ Recommended Usage:" -ForegroundColor Magenta
Write-Host "  Complete deploy: .\build-deploy-v2.ps1" -ForegroundColor Cyan
Write-Host "  Deploy only:     .\deploy-v2-clean.ps1" -ForegroundColor Cyan

Write-Host "`n‚ú® Cleanup completed!" -ForegroundColor Green
